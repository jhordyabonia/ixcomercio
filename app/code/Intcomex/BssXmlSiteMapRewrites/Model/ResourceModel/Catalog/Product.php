<?php

namespace Intcomex\BssXmlSiteMapRewrites\Model\ResourceModel\Catalog;

class Product extends \Bss\XmlSiteMap\Model\ResourceModel\Catalog\Product 
{

    /**
     * Override Function of \Bss\XmlSiteMap\Model\ResourceModel\Catalog\Product 
     * Filter product by store ud
     *
     * @param int $storeId
     * @return bool|\Zend_Db_Statement_Interface
     * @throws \Magento\Framework\Exception\LocalizedException
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function productFilter($storeId)
    {
        /* @var $store Store */
        $store = $this->storeManager->getStore($storeId);
        if (!$store) {
            return false;
        }

        $connection = $this->getConnection();
        $linkedFieldIdCategory = $this->categoryResource->getLinkField();
        $excludeSiteMapAttributeId = $this->getAttribute('excluded_xml_sitemap')['attribute_id'];
        $this->select = $connection->select()->from(
            ['e' => $this->getMainTable()],
            [
                $this->getIdFieldName(),
                $this->productResource->getLinkField(),
                'updated_at',
                'type_id',
                'attribute_set_id'
            ]
        )->joinInner(
            ['w' => $this->getTable('catalog_product_website')],
            'e.entity_id = w.product_id',
            []
        )->joinLeft(
            ['url_rewrite' => $this->getTable('url_rewrite')],
            'e.entity_id = url_rewrite.entity_id AND url_rewrite.is_autogenerated = 1 '
            . 'AND NULLIF(url_rewrite.metadata,"") IS NULL'
            . $connection->quoteInto(' AND url_rewrite.store_id = ?', $storeId)
            . $connection->quoteInto(' AND url_rewrite.entity_type = ?', ProductUrlRewriteGenerator::ENTITY_TYPE),
            ['url' => 'request_path']
        )->joinLeft(
            ['url_path' => $this->getTable('url_rewrite')],
            'e.entity_id = url_path.entity_id'
            . $connection->quoteInto(' AND url_path.store_id = ?', $store->getId()),
            ['url_path' => 'request_path']
        )->joinLeft(
            ['attribute_set' => $this->getTable('catalog_category_entity_varchar')],
            'e.attribute_set_id = attribute_set.' . $linkedFieldIdCategory . ' AND attribute_set.attribute_id = 124',
            ['manufacture' => 'value']
        )->joinLeft(
            ['check_exclude_sitemap_product' => $this->getTable('catalog_product_entity_text')],
            'e.row_id = check_exclude_sitemap_product.row_id AND check_exclude_sitemap_product.store_id = '.$storeId,
            ['excluded_xml_sitemap' => 'value']
        )->where(
            'w.website_id = ?',
            $store->getWebsiteId()
        );

        $this->addFilter($store->getId(), 'visibility', $this->productVisibility->getVisibleInSiteIds(), 'in');
        $this->addFilter($store->getId(), 'status', $this->productStatus->getVisibleStatusIds(), 'in');

        // Join product images required attributes
        $imageIncludePolicy = $this->sitemapData->getProductImageIncludePolicy($store->getId());
        if (\Bss\XmlSiteMap\Model\Source\Product\Image\IncludeImage::INCLUDE_NONE != $imageIncludePolicy) {
            $this->joinAttribute($store->getId(), 'name', 'name');
            if (\Bss\XmlSiteMap\Model\Source\Product\Image\IncludeImage::INCLUDE_ALL == $imageIncludePolicy) {
                $this->joinAttribute($store->getId(), 'thumbnail', 'thumbnail');
            } elseif (\Bss\XmlSiteMap\Model\Source\Product\Image\IncludeImage::INCLUDE_BASE == $imageIncludePolicy) {
                $this->joinAttribute($store->getId(), 'image', 'image');
            }
        }

        return $connection->query($this->select);
    }
}
